################################################################
# Listing 8.1: Convert text to objects using substrings
################################################################
$output = Invoke-SSH -Credential $cred -Computer VM005 -ScriptText 'df' | Select-String '/boot'

#Create object
$obj = "" | Select FileSystem,Size,Used,Available,Usage,Mount
$obj.FileSystem = $output.ToString().SubString(0,9)
$obj.Size = $output.ToString().SubString(24,6)
$obj.Used = $output.ToString().SubString(35,5)
$obj.Available = $output.ToString().SubString(45,5)
$obj.Usage = $output.ToString().SubString(52,2)
$obj.Mount = $output.ToString().SubString(56)

If ([int]$obj.Available -lt 50MB/1KB) {
  Write-Warning "Alert: Free space on volume /boot is low"
}

################################################################
# Listing 8.2: Convert text to objects using Regex
################################################################
$output = Invoke-SSH -Credential $cred -Computer VM005 -ScriptText 'df -P' | Select-String '/boot'
$regex = [regex]"(\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)%\s+(\S+)"
$matches = $regex.Match($output)

#Create object
$obj = "" | Select FileSystem,Size,Used,Available,Usage,Mount
$obj.FileSystem = $matches.Groups[1].value
$obj.Size = $matches.Groups[2].value
$obj.Used = $matches.Groups[3].value
$obj.Available = $matches.Groups[4].value
$obj.Usage = $matches.Groups[5].value
$obj.Mount = $matches.Groups[6].value

If ([int]$obj.Available -lt 50MB/1KB) {
  Write-Warning "Alert: Free space on volume /boot is low"
}

################################################################
# Listing 8.3: Convert text to objects using a simple Regex and Split()
################################################################
$output = Invoke-SSH -Credential $cred -Computer VM005 -ScriptText 'df -P'
$Partitions = @()

#skip the first header line
$output[1..($output.Length - 1)] | %{

  #Remove duplicate whitespaces
  $columns = [regex]::Replace($_,"\s+"," ").Split()

  #Create object
  $obj = "" | Select FileSystem,Size,Used,Available,Usage,Mount
  $obj.FileSystem = $columns[0]
  $obj.Size = $columns[1]
  $obj.Used = $columns[2]
  $obj.Available = $columns[3]
  $obj.Usage = $columns[4]
  $obj.Mount = $columns[5]
  $Partitions += $obj
}
$Partitions | ft -AutoSize 

################################################################
# Listing 8.4: Find and Rename the local Administrator account using WMI
################################################################
Function Rename-LocalUser {
<#
.SYNOPSIS
  Renames a local user account using WMI
.DESCRIPTION
  This function renames a local user account using WMI on
  the (remote) computer specified by the Computer parameter
.NOTES
  Source:  Automating vSphere Administration
  Authors: Luc Dekens, Arnim van Lieshout, Jonathan Medd,
           Alan Renouf, Glenn Sizemore
.PARAMETER userName
  The name of the local user account to rename
.PARAMETER newUserName
  The new name of the local user account
.PARAMETER computer
  The name of the computer to rename the local user account on.
  To run the operation on the local computer
  use 'localhost' or '.' as computer name
.EXAMPLE
  PS> Rename-LocalUser "Administrator" "GoodForNothing" "."
#>

  param(
    [parameter(mandatory = $true, position=1,
      HelpMessage = "Enter a local user account name")]
    [String]$userName,
    [parameter(mandatory = $true, position=2,
      HelpMessage = "Enter a new user name")]
    [String]$newUserName,
    [parameter(mandatory = $true, position=3,
      HelpMessage = "Enter a computer name")]
    [String]$Computer)
  
  $user = Get-WmiObject -Query "Select * From Win32_UserAccount
    Where LocalAccount = True And 
    Name = '$userName'" -ComputerName $computer
  
  If ($user) {
    Write-Host -ForegroundColor Yellow "User $userName found on $computer"
    $result = $user | %{$_.Rename("$newUserName")}
    If ($result.ReturnValue -eq 0) {
      Write-Host -ForegroundColor Yellow "User $userName successfully renamed to $newUserName"
    }
    else {
      Write-Host -ForegroundColor Red "Rename operation failed.
Errorcode $($result.ReturnValue)"
    }
  }
}

$winServers = Get-VM | Where {$_.PowerState -eq "PoweredOn" -and $_.ExtensionData.Config.GuestId -like "win*"}
ForEach ($vm in $winServers) {
  Rename-LocalUser "Administrator" "GoodForNothing" $vm.Name
}

################################################################
# Listing 8.5: Report the status of a service using PowerShell remoting
################################################################
Function Check-Service {
<#
.SYNOPSIS
  Checks the state of a service using PowerShell remoting
.DESCRIPTION
  This function checks the state of a service using
  PowerShell remoting. The optional restart switch can be used
  to restart a service if it is stopped.
.NOTES
  Source:  Automating vSphere Administration
  Authors: Luc Dekens, Arnim van Lieshout, Jonathan Medd,
           Alan Renouf, Glenn Sizemore
.PARAMETER Computer
  One or more computer names to check the service on
.PARAMETER Service
  One or more service names to check
.PARAMETER Start
  Optional parameter to start a stopped service
.PARAMETER Restart
  Optional parameter to restart a service
.EXAMPLE
  PS> Check-Service -Computer VM001 -Service wuauserv
#>

  Param(
    [parameter(mandatory = $true,
    HelpMessage = "Enter a computer name")]
    [string]$Computer,
    [parameter(mandatory = $true,
    HelpMessage = "Enter a service name")]
    [string]$Service,
    [switch]$Start,
    [switch]$Restart)
  
  $report=@()
#establish a persistent connection
  $session = New-PSSession $Computer
  $remoteService = Invoke-Command –Session $session -ScriptBlock {
    param($ServiceName)
    $localService = Get-Service $ServiceName
    $localService
  } -ArgumentList $Service
  If ($Start -and $remoteService.Status -eq "Stopped") {
    Invoke-Command –Session $session -ScriptBlock {
        $localService.Start()
    }
    $remoteService | Add-Member -MemberType NoteProperty -Name Started -Value $True
  }
  If ($Restart) {
    Invoke-Command –Session $session -ScriptBlock {
      $localService.stop()
      $localService.WaitForStatus("Stopped")
      $localService.start()
    }
    $remoteService | Add-Member -MemberType NoteProperty -Name Restarted -Value $True
  }
  $report += $remoteService
#close persistent connection
  Remove-PSSession $session
  $report
}

################################################################
# Listing 8.6: Evacuate ESX host
################################################################
Function Evacuate-VMHost {
<#
.SYNOPSIS
  Puts host into maintenance mode and moves all VMs on the host
  to other members in the same cluster
.DESCRIPTION
  This function puts a host in maintenance mode and moves all
  VMs from the VMHost randomly to other hosts in the cluster.
  If -TargetHost is specified, all VMs are moved to this
  TargetHost instead of random cluster members.
.NOTES
  Source:  Automating vSphere Administration
  Authors: Luc Dekens, Arnim van Lieshout, Jonathan Medd,
           Alan Renouf, Glenn Sizemore
.PARAMETER VMHost
  The source host to put into maintenance mode
.PARAMETER TargetHost
  Optional target host
.EXAMPLE
  PS> Evacuate-VMHost -VMHost ESX01
.EXAMPLE
  PS> Evacuate-VMHost -VMHost ESX01 -TargetHost ESX02
#>

  Param(
      [parameter(mandatory = $true, position=1,
    HelpMessage = "Enter a source server")]
    [PSObject]$VMHost,
    [PSObject]$TargetHost)
    
  if ("String","VMHostImpl" -notcontains $VMHost.GetType().Name) {
    throw "No valid type for -VMHost specified"
  }
  if ($TargetHost -and "String","VMHostImpl" -notcontains $TargetHost.GetType().Name) {
    throw "No valid type for -TargetHost specified"
  }

  $sourceHost = Get-VMHost $VMHost
  if ($TargetHost) {
    $TargetHost = Get-VMHost $TargetHost
    if (!$TargetHost) {
      throw "-TargetHost cannot be found"
    }
  }
  else {
    $cluster = Get-Cluster -VMHost $sourceHost
    if (!$cluster) {
      throw "No cluster found"
    }
    $clusterHosts = $cluster | Get-VMHost | ?{$_.Name -ne $sourceHost.Name -and $_.State -eq "Connected"}
    if (!$clusterHosts) {
      throw "No valid cluster members found"
    }
  }
  
#Evacuate all VMs from host
  foreach ($vm in ($sourceHost | Get-VM)) {
    if ($TargetHost) {
      $vmDestination = $TargetHost
    }
    else {
      $vmDestination = $clusterHosts | Get-Random
    }
    Move-VM -VM $vm -Destination $vmDestination -RunAsync:$true -Confirm:$false | Out-Null
  }
  
#Put host into maintenance mode
  $sourceHost | Set-VMHost -State "Maintenance" -RunAsync:$true | Out-Null
}

################################################################
# Listing 8.7: Move all VMs from one datastore to another
################################################################
Function Move-Datastore {
<#
.SYNOPSIS
  Moves all registered .vmx and .vmdk files to another datastore
.DESCRIPTION
  This function moves all registered vms from the source
  datastore to the target datastore
.NOTES
  Source:  Automating vSphere Administration
  Authors: Luc Dekens, Arnim van Lieshout, Jonathan Medd,
           Alan Renouf, Glenn Sizemore
.PARAMETER SourceDatastore
  The source datastore name or object
.PARAMETER TargetDatastore
  The target datastore name or object
.EXAMPLE
  PS> Move-Datastore -SourceDatastore "Datastore01" -TargetDatastore "Datastore02"
.EXAMPLE
  PS> Move-Datastore "Datastore01" "Datastore02"
#>

  param(
    [parameter(mandatory = $true, position=1,
    HelpMessage = "Enter a source datastore")]
    [PSObject]$SourceDatastore,
    [parameter(mandatory = $true, position=2,
    HelpMessage = "Enter a target datastore")]
    [PSObject]$TargetDatastore)

  if ("String","DatastoreImpl" -notcontains $SourceDatastore.GetType().Name) {
    throw "No valid type for -SourceDatastore specified"
  }
  if ("String","DatastoreImpl" -notcontains $TargetDatastore.GetType().Name) {
    throw "No valid type for -TargetDatastore specified"
  }
  
  $SourceDatastore = Get-Datastore $SourceDatastore
  $TargetDatastore = Get-Datastore $TargetDatastore
  foreach($vm in ($SourceDatastore | Get-VM)) {
    $configFile = $vm.ExtensionData.Config.Files.VmPathName
    $configDatastoreName = $configFile.Trim('[').Split(']')[0]
    if ($configDatastoreName -eq $SourceDatastore.Name) {
      $configDatastoreName = $TargetDatastore.Name
    }
    $spec = New-Object VMware.Vim.VirtualMachineRelocateSpec
    $dsView = Get-Datastore $configDatastoreName | Get-View
    $spec.Datastore = $dsView.MoRef
    foreach ($disk in $vm.HardDisks) {
      $diskDatastoreName= $disk.FileName.Trim('[').Split(']')[0]
      if ($diskDatastoreName -eq $SourceDatastore.Name) {
        $diskDatastoreName = $TargetDatastore.Name
      }
      $objDisk = New-Object VMware.Vim.VirtualMachineRelocateSpecDiskLocator
      $objDisk.DiskID = $disk.Id.Split('/')[1]
      $dsView = Get-Datastore $diskDatastoreName | Get-View
      $objDisk.DataStore = $dsView.MoRef
      $spec.Disk += $objDisk
    }
    $vm.ExtensionData.RelocateVM_Task($spec, "defaultPriority")
  }
}

################################################################
# Listing 8.8: Listing snapshots over 2 weeks old including creator
################################################################
function Get-SnapshotTree{
  param($tree, $target)
  $found = $null
  foreach($elem in $tree){
    if($elem.Snapshot.Value -eq $target.Value){
      $found = $elem
      continue
    }
  }
  if($found -eq $null -and $elem.ChildSnapshotList -ne $null){
    $found = Get-SnapshotTree $elem.ChildSnapshotList $target
  }
  return $found
}

function Get-SnapshotExtra ($snap){
  $guestName = $snap.VM #The name of the guest
  $tasknumber = 999 #Windowsize of the Task collector
  $taskMgr = Get-View TaskManager

#Create hash table. Each entry is a create snapshot task
  $report = @{}

  $filter = New-Object VMware.Vim.TaskFilterSpec
  $filter.Time = New-Object VMware.Vim.TaskFilterSpecByTime
  $filter.Time.beginTime = (($snap.Created).AddDays(-5))
  $filter.Time.timeType = "startedTime"

  $collectionImpl = Get-View ($taskMgr.CreateCollectorForTasks($filter))

  $dummy = $collectionImpl.RewindCollector
  $collection = $collectionImpl.ReadNextTasks($tasknumber)
  while($collection -ne $null){
    $collection | where {$_.DescriptionId -eq "VirtualMachine.createSnapshot" -and $_.State -eq "success" -and $_.EntityName -eq $guestName} | %{
      $row = New-Object PsObject
      $row | Add-Member -MemberType NoteProperty -Name User -Value $_.Reason.UserName
      $vm = Get-View $_.Entity
      if($vm -ne $null){ 
        $snapshot = Get-SnapshotTree $vm.Snapshot.RootSnapshotList $_.Result
        if($snapshot -ne $null){
          $key = $_.EntityName + "&" + ($snapshot.CreateTime.ToString())
          $report[$key] = $row
        }
      }
    }
    $collection = $collectionImpl.ReadNextTasks($tasknumber)
  }
  $collectionImpl.DestroyCollector()

  # Get the guest's snapshots and add the user
  $snapshotsExtra = $snap | % {
    $key = $_.vm.Name + "&" + ($_.Created.ToString())
    if($report.ContainsKey($key)){
      $_ | Add-Member -MemberType NoteProperty -Name Creator -Value $report[$key].User
    }
    $_
  }
  $snapshotsExtra
}

$Today = Get-Date
$2WeeksAgo = $Today.AddDays(-14)
Get-VM | Get-Snapshot | Where {$_.Created -lt $2WeeksAgo} | %{
  Get-SnapshotExtra $_ | Select VM, Name, Created, Creator
}

################################################################
# Listing 8.9: Send email to snapshot creator
################################################################
Function Get-ADUserObject {
<#
.SYNOPSIS
  Retrieves a user object from Active Directory
.DESCRIPTION
  This function retrieves a user object from Active Directory
  specified by the -UserName variable
.NOTES
  Source:  Automating vSphere Administration
  Authors: Luc Dekens, Arnim van Lieshout, Jonathan Medd,
           Alan Renouf, Glenn Sizemore
.PARAMETER UserName
  The SAM account name of the user object to retrieve
.EXAMPLE
  PS> Get-ADUserObject "administrator"
#>

  Param ([parameter(valuefrompipeline = $true, mandatory=$true,
    HelpMessage = "Enter a user SAM accountname")]
    [string]$userName)

  $ds = New-Object system.DirectoryServices.DirectorySearcher
  $ds.searchRoot = [ADSI]""
  $ds.searchScope = "subtree"
  $ds.filter = "(&(objectClass=user)(samAccountName=$userName))"
  $result = $ds.findOne()
  if ($result) {
    return $result.GetDirectoryEntry()
  }
}

Function Get-SnapshotCreator {
<#
.SYNOPSIS
  Retrieves the user who created the snapshot
.DESCRIPTION
  This function retrieves the user who created the snapshot
  specified by the -Snapshot parameter
.NOTES
  Source:  Automating vSphere Administration
  Authors: Luc Dekens, Arnim van Lieshout, Jonathan Medd,
           Alan Renouf, Glenn Sizemore
.PARAMETER Snapshot
  The snapshot to return the creator of
.EXAMPLE
  PS> Get-SnapshotCreator $mySnapshot
.EXAMPLE
  PS> $mySnapshot | Get-SnapshotCreator
#>

  Param ([parameter(valuefrompipeline = $true, mandatory=$true,
    HelpMessage = "Enter a snapshot entity")]
    [VMware.VimAutomation.ViCore.Impl.V1.VM.SnapshotImpl]$snapshot)
  
  $taskNumber = 100
  $taskMgr = Get-View TaskManager
  
  $filter = New-Object VMware.Vim.TaskFilterSpec
  $filter.Time = New-Object VMware.Vim.TaskFilterSpecByTime
  $filter.Time.beginTime = (($snapshot.Created).AddDays(-1))
  $filter.Time.endTime = ($snapshot.Created)
  $filter.Time.timeType = "startedTime"
  $filter.Entity = New-Object VMware.Vim.TaskFilterSpecByEntity
  $filter.Entity.Entity = $snapshot.extensiondata.vm
  $filter.state = New-Object VMware.Vim.TaskInfoState
  $filter.state = "success"

  $taskCollector = Get-View ($taskMgr.CreateCollectorForTasks($filter))
  
  $taskCollector.RewindCollector | Out-Null 
  $taskCollection = $taskCollector.ReadNextTasks($taskNumber)
  $matches=@()
  while ($taskCollection) {
    $matches += $taskCollection | Where {$_.DescriptionId -eq "VirtualMachine.createSnapshot" -and $_.Result.ToString() -eq $snapshot.Id}
    $taskCollection = $taskCollector.ReadNextTasks($taskNumber)
  }
  $taskCollector.DestroyCollector() 
  $matches | %{$_.Reason.UserName}
}

#Use variables below to define your settings
$smtpServer = "mySMTP.myDomain.local"
$mailFrom = "Admin@myDomain.local"
$mailSubject = "Snapshot too old"
$snapshotAge = (Get-Date).AddDays(-14)

Get-VM | Get-Snapshot | Where {$_.Created -lt $snapshotAge} | %{
  $creator = $_ | Get-SnapshotCreator
  $samAccountName = $creator.split('\') | Select -Last 1
  $adUser = $samAccountName | Get-ADUserObject
  
  $mailMessage = @"
Dear $($adUser.givenName),
` 
It appears that you've created a snapshot that is older than 
the maximum allowed number of days.
Please delete the snapshot.
` 
Snapshot details:
` 
Name: $($_.Name)
VM: $($_.VM.Name)
Description: $($_.Description)
Created on: $($_.Created)
Days old: $(((Get-date)-$_.Created).days)
Size: $($_.SizeMB)MB
` 
` 
Regards,
Your VMware Administrator
"@

  Send-MailMessage -SmtpServer $smtpServer -From $mailFrom `
      -To $($adUser.Mail) -Subject $mailSubject `
      -Body $mailMessage
}

################################################################
# Listing 8.10: Restricting creation of Snapshots
################################################################
function Set-VMAdvancedConfiguration{ 
<#
.SYNOPSIS
  Sets an advanced configuration setting (VMX Setting) for a VM
  or multiple VMs
.DESCRIPTION
  The function will set a VMX setting for a VM
  or multiple VMs
.NOTES
  Source:  Automating vSphere Administration
  Authors: Luc Dekens, Arnim van Lieshout, Jonathan Medd,
           Alan Renouf, Glenn Sizemore
.PARAMETER VM
  A virtual machine or multiple virtual machines
.PARAMETER Key
  The Key to use for the advanced configuration
.PARAMETER Value
  The value of the key
.EXAMPLE 1
  PS> Set-VMAdvancedConfiguration -key log.rotatesize -value 10000
#>

  param(
    [Parameter(Mandatory=$true,ValueFromPipeline=$true)]
      $vm,
    [Parameter(Mandatory=$true)]
      [String]$key,
    [Parameter(Mandatory=$true)]
      [String]$value) 

  process{ 
    $vmConfigSpec = new-object VMware.Vim.VirtualMachineConfigSpec
    $vmConfigSpec.ExtraConfig += new-object VMware.Vim.OptionValue
    $vmConfigSpec.ExtraConfig[0].key = $key
    $vmConfigSpec.ExtraConfig[0].value = $value

    foreach ($singlevm in $vm) {
      $VMview = $singlevm | get-view
      $Task = $VMview.ReconfigVM_Task($vmConfigSpec)
      Write "Set Advanced configuration for $($singleVM.Name): $key = $value"
    }
  } 
}

Get-VM APP* | Set-VMAdvancedConfiguration -key snapshot.maxSnapshots -value 0
