Function New-RegKey ($RegLocation, $RegKey, $RegValue) {
   If (Test-Path $RegLocation) { 
   } Else { 
      Write "Creating Registry Key $RegLocation"
      Mkdir $RegLocation | Out-Null
   }
   If (Get-ItemProperty $RegLocation $RegKey -ErrorAction SilentlyContinue) {
       Write "Registry Key '$RegKey' already Exists."
   } Else {
       Write "Creating $RegKey with a value of $RegValue"
       New-ItemProperty -Path $RegLocation -Name $RegKey -Value $RegValue `
       | Out-Null
   } 
}

#Install VC unattended 
$VCMedia = "C:\Temp\InstallMedia"
$LiKey = "XXX-XXX-XXX-XXX"
$Username = "My Name"
$CompanyName = "My Company"
$ODBCName = "vCenter Database"
$DBSrv = "SQL2005DB"
$DBUser = "VMware"
$DBPass = "VCDataba53"

# For SQL 2008 connections ensure the database client is installed
If (-Not (Test-Path 'C:\WINDOWS\system32\sqlncli10.dll')) {
 Write "SQL 2008 Native Client not found. Install it & then re-run this script"
 Exit
}

#Create DSN connection 
$DrvPath = "C:\WINDOWS\system32\sqlncli10.dll"
New-Regkey "HKLM:SOFTWARE\ODBC\ODBC.INI\$ODBCName" "Driver" $DrvPath
New-RegKey "HKLM:SOFTWARE\ODBC\ODBC.INI\$ODBCName" "Description" $ODBCName
New-RegKey "HKLM:SOFTWARE\ODBC\ODBC.INI\$ODBCName" "Server" $DBSrv 
New-RegKey "HKLM:SOFTWARE\ODBC\ODBC.INI\$ODBCName" "LastUser" $DBUser
New-RegKey "HKLM:SOFTWARE\ODBC\ODBC.INI\ODBC Data Sources" $ODBCName `
"SQL Server Native Client 10.0"

# Install vCenter 
Write-Host "Installing vCenter" 
$exe = "$VCmedia\vpx\VMware-vcserver.exe"
$args = '/q /s /w /L1033 /v" /qr USERNAME=\"$($username)\" '
$args = $agrs + 'COMPANYNAME=\"$($Companyname)\" LICENSEKEY=\"$($LIKey)\" '
$args = $args + 'DB_SERVER_TYPE=Custom DB_DSN=\"$($ODBCName)\" '
$args = $args + 'DB_USERNAME=\"$($DBUser)\" DB_PASSWORD=\"$($DBPass)\" '
$args = $args + 'REBOOT=SUPPRESS'
Start-process $exe $args -Wait

# Initiate the Database Tables 
Write-Host "DB tables"
$Exec = "$ENV:PROGRAMFILES\VMware\Infrastructure\VirtualCenter Server\vpxd.exe"
Start-Process $Exec "-b" -Wait
Start-Service vpxd



# Install vCenter Client 
Write-Host "Installing vCenter Client" 
Invoke-Item "$VCMedia\vpx\VMware-viclient.exe /s /w /v /qn ` 
/L*v %TEMP%\vmvcc.log `
WARNING_LEVEL=0"


# Install vCenter Client with Host Update Utility 
Write-Host "Installing vCenter Client with Host Update Utility" 
Invoke-Item "$VCMedia\vpx\VMware-viclient.exe /s /w /v /qn ` 
/L*v %TEMP%\vmvcc.log `
WARNING_LEVEL=0 `
INSTALL_VIUPDATE=1"


function Import-Folders{ 
<#
.SYNOPSIS
  Imports a csv file of folders into vCenter Server and
  creates them automatically.
.DESCRIPTION
  The function will import folders from CSV file and create
  them in vCenter Server.
.NOTES
  Authors:  Luc Dekens & Alan Renouf
.PARAMETER FolderType
  The type of folder to create
.PARAMETER DC
  The Datacenter to create the folder structure
.PARAMETER Filename
  The path of the CSV file to use when importing
.EXAMPLE 1
  PS> Import-Folders -FolderType "Blue" -DC "DC01" -Filename "C:\BlueFolders.csv"
.EXAMPLE 2
  PS> Import-Folders -FolderType "Yellow" -DC "Datacenter" 
  -Filename "C:\YellowFolders.csv"
#>

  param( 
  [String]$FolderType, 
  [String]$DC,
  [String]$Filename
  ) 

  process{ 
    $vmfolder = Import-Csv $filename | Sort-Object -Property Path 
   If ($FolderType -eq "Yellow") {
      $type = "host"
   } Else {
      $type = "vm"
   }
   foreach($folder in $VMfolder){ 
      $key = @()
      $key =  ($folder.Path -split "\\")[-2] 
      if ($key -eq "vm") { 
         get-datacenter $dc | get-folder $type | New-Folder -Name $folder.Name 
      } else { 
        Get-Datacenter $dc | get-folder $type | get-folder $key | `
            New-Folder -Name $folder.Name  
      } 
   }
  } 
} 

Import-Folders -FolderType "blue" -DC "DC01" -Filename "C:\BlueFolders.csv"


Filter Get-FolderPath {
<#
.SYNOPSIS
  Colates the full folder path
.DESCRIPTION
  The function will find the full folder path returning a
  name and path
.NOTES
  Authors:  Luc Dekens & Alan Renouf
#>
    $_ | Get-View | % {
        $row = "" | select Name, Path
        $row.Name = $_.Name

        $current = Get-View $_.Parent
        $path = $_.Name
        do {
            $parent = $current
            if($parent.Name -ne "vm"){$path = $parent.Name + "\" + $path}
            $current = Get-View $current.Parent
        } while ($current.Parent -ne $null)
        $row.Path = $path
        $row
    }
}

Function Export-Folders {
  <#
.SYNOPSIS
  Creates a csv file of folders in vCenter Server.
.DESCRIPTION
  The function will export folders from vCenter Server 
  and add them to a CSV file.
.NOTES
  Authors:  Luc Dekens & Alan Renouf
.PARAMETER FolderType
  The type of folder to export
.PARAMETER DC
  The Datacenter where the folders reside
.PARAMETER Filename
  The path of the CSV file to use when exporting
.EXAMPLE 1
  PS> Export-Folders -FolderType "Blue" -DC "DC01" -Filename "C:\BlueFolders.csv"
.EXAMPLE 2
  PS> Export-Folders -FolderType "Yellow" -DC "Datacenter" 
  -Filename "C:\YellowFolders.csv"
#>

  param( 
  [String]$FolderType, 
  [String]$DC,
  [String]$Filename
  ) 
   
  Process {
   If ($Foldertype -eq "Yellow") {
      $type = "host"
   } Else {
     $type = "vm"
   }
   $report = @()
   $report = get-datacenter $dc | Get-folder $type | get-folder | Get-Folderpath
   $Report | foreach {
    if ($type -eq "vm") {
     $_.Path = ($_.Path).Replace($dc + "\","$type\")
    } 
   }
   $report | Export-Csv $filename -NoTypeInformation
  }
}

Function Export-VMLocation {
  <#
.SYNOPSIS
  Creates a csv file with the folder location of each VM.
.DESCRIPTION
  The function will export VM locations from vCenter Server 
  and add them to a CSV file.
.NOTES
  Authors:  Luc Dekens & Alan Renouf
.PARAMETER DC
  The Datacenter where the folders reside
.PARAMETER Filename
  The path of the CSV file to use when exporting
.EXAMPLE 1
  PS> Export-VMLocation -DC "DC01" -Filename "C:\VMLocations.csv"
#>

  param( 
  [String]$DC,
  [String]$Filename
  )
  
  Process {
   $report = @()
   $report = get-datacenter $dc | get-vm | Get-Folderpath
   $report | Export-Csv $filename -NoTypeInformation
  }
}

Export-Folders "Blue" "DC01" "C:\BlueFolders.csv"
Export-VMLocation "DC01" "C:\VMLocation.csv"
Export-Folders "Yellow" "DC01" "C:\YellowFolders.csv"

Function Import-VMLocation {
 <#
.SYNOPSIS
  Imports the VMs back into their Blue Folders based on
  the data from a csv file.
.DESCRIPTION
  The function will import VM locations from CSV File 
  and add them to their correct Blue Folders.
.NOTES
  Authors:  Luc Dekens & Alan Renouf
.PARAMETER DC
  The Datacenter where the folders reside
.PARAMETER Filename
  The path of the CSV file to use when importing
.EXAMPLE 1
  PS> Import-VMLocation -DC "DC01" -Filename "C:\VMLocations.csv"
#>

  param( 
  [String]$DC,
  [String]$Filename
  )
  
  Process {
   $Report = @()
   $Report = import-csv $filename | Sort-Object -Property Path
   foreach($vmpath in $Report){
      $key = @()
      $key =  Split-Path $vmpath.Path | split-path -leaf
      Move-VM (get-datacenter $dc `
      | Get-VM $vmpath.Name) -Destination (get-datacenter $dc | Get-folder $key) 
   }
  }
}

Import-VMLocation "DC01" "C:\VMLocation.csv"


New-VIRole `
-Name 'New Custom Role' `
-Privilege (Get-VIPrivilege `
-PrivilegeGroup "Interaction","Provisioning")


Function Export-PermissionsToCSV {
 <#
.SYNOPSIS
  Exports all Permissions to CSV file
.DESCRIPTION
  The function will export all permissions to a CSV
  based file for later import
.NOTES
  Authors:  Luc Dekens & Alan Renouf
.PARAMETER Filename
  The path of the CSV file to be created
.EXAMPLE 1
  PS> Export-PermissionsToCSV -Filename "C:\Temp\Permissions.csv"
#>


  param( 
  [String]$Filename
  )
  
  Process {
   $folderperms = get-datacenter | Get-Folder | Get-VIPermission
   $vmperms = Get-Datacenter | get-vm | Get-VIPermission


   $permissions = get-datacenter | Get-VIpermission


   $report = @()
      foreach($perm in $permissions){
        $row = "" | select EntityId, Name, Role, Principal, IsGroup, Propagate
        $row.EntityId = $perm.EntityId
        $Foldername = (Get-View -id $perm.EntityId).Name
        $row.Name = $foldername
        $row.Principal = $perm.Principal
        $row.Role = $perm.Role
        $row.IsGroup = $perm.IsGroup
        $row.Propagate = $perm.Propagate
        $report += $row
    }


    foreach($perm in $folderperms){
        $row = "" | select EntityId, Name, Role, Principal, IsGroup, Propagate
        $row.EntityId = $perm.EntityId
        $Foldername = (Get-View -id $perm.EntityId).Name
        $row.Name = $foldername
        $row.Principal = $perm.Principal
        $row.Role = $perm.Role
        $row.IsGroup = $perm.IsGroup
        $row.Propagate = $perm.Propagate
        $report += $row
    }


    foreach($perm in $vmperms){
        $row = "" | select EntityId, Name, Role, Principal, IsGroup, Propagate
        $row.EntityId = $perm.EntityId
        $Foldername = (Get-View -id $perm.EntityId).Name
        $row.Name = $foldername
        $row.Principal = $perm.Principal
        $row.Role = $perm.Role
        $row.IsGroup = $perm.IsGroup
        $row.Propagate = $perm.Propagate
        $report += $row
    }


    $report | export-csv $Filename -NoTypeInformation
  }
}

Export-PermissionsToCSV -Filename "C:\Temp\Permissions.csv"


function Import-Permissions {
<#
.SYNOPSIS
  Imports all Permissions from CSV file
.DESCRIPTION
  The function will import all permissions from a CSV
  file and apply them to the vCenter objects.
.NOTES
  Authors:  Luc Dekens & Alan Renouf
.PARAMETER DC
  The Datacenter to import the permissions into
.PARAMETER Filename
  The path of the CSV file to be imported
.EXAMPLE 1
  PS> Import-Permissions -DC "DC01" -Filename "C:\Temp\Permissions.csv"
#>


param(
[String]$DC,
[String]$Filename
)


process {
 $permissions = @()
 $permissions = Import-Csv $Filename
 foreach ($perm in $permissions) {
  $entity = ""
  $entity = New-Object VMware.Vim.ManagedObjectReference
  $object = Get-Inventory -Name $perm.Name
  if($object.Count){
   $object = $object | where {$_.Id -eq $perm.EntityId}
  }
  if($object){
   switch -wildcard ($perm.EntityId)
   {
    Folder* {
     $entity.type = "Folder"
     $entity.value = $object.Id.Trimstart("Folder-")
    }
    VirtualMachine* {
     $entity.Type = "VirtualMachine"
     $entity.value = $object.Id.Trimstart("VirtualMachine-")
    }
    ClusterComputeResource* {
     $entity.Type = "ClusterComputeResource"
     $entity.value = $object.Id.Trimstart("ClusterComputeResource-")
    }
    Datacenter* {
	$entity.Type = "Datacenter"
     $entity.value = $object.Id.Trimstart("Datacenter-")
    }
   }
   $setperm = New-Object VMware.Vim.Permission
   $setperm.principal = $perm.Principal
   if ($perm.isgroup -eq "True") {
    $setperm.group = $true
   } else {
    $setperm.group = $false
   }
   $setperm.roleId = (Get-virole $perm.Role).id
   if ($perm.propagate -eq "True") {
    $setperm.propagate = $true
   } else {
    $setperm.propagate = $false
   }
   $doactual = Get-View -Id 'AuthorizationManager-AuthorizationManager'
   Write-Host "Setting Permissions on $($perm.Name) for $($perm.principal)"
   $doactual.SetEntityPermissions($entity, $setperm)
  }
 }
 }
}


Import-Permissions -DC "DC01" -Filename "C:\Temp\Permissions.csv"


$ProductionCluster = New-Cluster `
-Location $BostonDC `
-Name "Production" `
-HAEnabled -HAAdmissionControlEnabled `
-HAFailoverLevel 1 `
-HARestartPriority "Medium"


Get-Cluster `
-Location $BostonDC `
-Name "Production" | `
Set-Cluster -HAEnabled $true `
-HAAdmissionControlEnabled $true `
-HAFailoverLevel 1 `
-HARestartPriority "Medium"


$ProductionCluster = New-Cluster "Production" `
-DrsEnabled `
-DrsAutomationLevel "FullyAutomated" `
-DrsMode "FullyAutomated"


Get-Cluster -Location $BostonDC `
-Name "Production" | Set-Cluster `
-DrsEnabled $true `
-DrsAutomationLevel "FullyAutomated" `
-DrsMode "FullyAutomated"


Function Set-DPM {
 <#
.SYNOPSIS
  Enables Distributed Power Management on a cluster
.DESCRIPTION
  This funtion will allow you to configure
  DPM on an existing vCenter Server cluster
.NOTES
  Authors:  Luc Dekens & Alan Renouf
.PARAMETER Cluster
  The cluster on which to set DPM configuration
.PARAMETER Behavior
  DPM Behavior, this can be set to "off", "manual" 
  or "Automated", by default it is "off"
.EXAMPLE 1
  PS> Set-DPM -Cluster "Cluster01" -Behavior "Automated"
#>

param( 
  [String]$Cluster,
  [String]$Behavior
  )
  
  Process {
   switch ($Behavior) {
            "Off" { 
               $DPMBehavior = "Automated" 
               $Enabled = $false
            }
            "Automated" { 
               $DPMBehavior = "Automated" 
               $Enabled = $true
            }
            "Manual" { 
               $DPMBehavior = "Manual" 
               $Enabled = $true
            }
            default {
               $DPMBehavior = "Automated" 
               $Enabled = $false
            }
      }
   $clus = Get-Cluster $Cluster | Get-View
   $spec = New-Object vmware.Vim.ClusterConfigSpecEx
   $spec.dpmConfig = New-Object VMware.Vim.ClusterDpmConfigInfo
   $spec.DpmConfig.DefaultDpmBehavior = $DPMBehavior
   $spec.DpmConfig.Enabled = $Enabled
   $clus.ReconfigureComputeResource_Task($spec, $true)
  }
}

Set-DPM -Cluster "Cluster01" -Behavior "Automated"


Function Get-LicenseKey {
 <#
.SYNOPSIS
  Retrieves License Key information
.DESCRIPTION
  This funtion will list all licence keys added to 
  vCenter Server
.NOTES
  Authors:  Luc Dekens & Alan Renouf
.EXAMPLE 1
  PS> Get-LicenseKey
#>
 
  Process {
   $servInst = Get-View ServiceInstance
   $licMgr = Get-View (Get-View ServiceInstance).Content.licenseManager
   $licMgr.Licenses
  }
}

Get-LicenseKey


Function Set-LicenseKey {
 <#
.SYNOPSIS
  Sets a License Key for a host
.DESCRIPTION
  This funtion will set a license key for a host
  which is attached to a vCenter server
.NOTES
  Authors:  Luc Dekens & Alan Renouf
.PARAMETER LicKey
  The License Key
.PARAMETER VMHost
  The vSphere host which to set the license on
.PARAMETER Name
  The friendly name to give the license key
.EXAMPLE 1
  PS> Set-LicenseKey -LicKey "AAAAA-BBBBB-CCCCC-DDDDD-EEEEE" `
	-VMHost "esxhost01.mydomain.com" `
	-Name $null
#>

param( 
  [String]$VMHost, 
  [String]$LicKey, 
  [String]$Name
  )
  
  Process {
   $vmhostId = (Get-VMHost $VMHost | Get-View).Config.Host.Value
   $servInst = Get-View ServiceInstance
   $licMgr = Get-View $servInst.Content.licenseManager
   $licAssignMgr = Get-View $licMgr.licenseAssignmentManager

   $license = New-Object VMware.Vim.LicenseManagerLicenseInfo
   $license.LicenseKey = $LicKey
   $licAssignMgr.UpdateAssignedLicense($VMHostId, $license.LicenseKey, $Name)
   }
}

Set-LicenseKey -LicKey "AAAAA-BBBBB-CCCCC-DDDDD-EEEEE" `
-VMHost "esxhost01.mydomain.com" `
-Name $null


