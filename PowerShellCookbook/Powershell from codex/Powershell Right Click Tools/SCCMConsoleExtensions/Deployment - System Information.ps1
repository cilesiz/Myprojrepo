<#
Written by Ryan Ephgrave for ConfigMgr 2012 Right Click Tools
http://psrightclicktools.codeplex.com/
GUI Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.10.0
#>

$DeploymentName = $args[0]
$DeploymentID = $args[1]
$AssignmentID = $args[2]
$FeatureType = $args[3]
$Server = $args[4]
$Namespace = $args[5]
$Statuses = $args[6]

$script:CancelAction = $false
$Popup = new-object -comobject wscript.shell

$GetDirectory = $MyInvocation.MyCommand.path
$Directory = Split-Path $GetDirectory

function GenerateForm {

#region Import the Assemblies
[reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
[reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
#endregion

#region Generated Form Objects
$form1 = New-Object System.Windows.Forms.Form
$RunningOnLbl = New-Object System.Windows.Forms.Label
$NoteLbl = New-Object System.Windows.Forms.Label
$AboutBtn = New-Object System.Windows.Forms.Button
$RerunBtn = New-Object System.Windows.Forms.Button
$CloseCancelBtn = New-Object System.Windows.Forms.Button
$LogBox = New-Object System.Windows.Forms.RichTextBox
$SystemInfoView = New-Object System.Windows.Forms.DataGridView
$ContextMenuStrip = New-Object System.Windows.Forms.ContextMenuStrip
$DeployNameLbl = New-Object System.Windows.Forms.Label
$InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
#endregion Generated Form Objects

$AboutBtn_OnClick= 
{
	$ArgList = @()
	$ArgList += @("`"$Directory\SilentOpenPS.vbs`"")
	$ArgList += @("`"$Directory\About.ps1`"")
	Start-Process wscript.exe -ArgumentList $ArgList
}

$OnClose=
{
	$ProcessID = [System.Diagnostics.Process]::GetCurrentProcess()
	$ProcID = $ProcessID.ID
	& taskkill /PID $ProcID /T /F
}

$RerunBtn_OnClick= 
{
	$ArgList = @()
	$ArgList += @("`"$Directory\SilentOpenPS.vbs`"")
	$ArgList += @("`"$Directory\Deployment - System Information.ps1`"")
	$ArgList += @("`"$DeploymentName`"")
	$ArgList += @("`"$DeploymentID`"")
	$ArgList += @("`"$AssignmentID`"")
	$ArgList += @("`"$FeatureType`"")
	$ArgList += @("`"$Server`"")
	$ArgList += @("`"$Namespace`"")
	$ArgList += @("`"$Statuses`"")
	Start-Process wscript.exe -ArgumentList $ArgList
}

$CloseCancelBtn_OnClick= 
{
	$CloseCancelText = $CloseCancelBtn.Text
	if ($CloseCancelText -eq "Close") {
		$form1.close()
	}
	else {
		$script:CancelAction = $true
	}
}

$ShutdownDevices_Menu1=
{
	$SelectedCellsCount = 0
	$CompListArray = $null
	$SystemInfoView.SelectedCells | ForEach-Object {
		if ($_.ColumnIndex -eq 0) {
			$SelectedCellsCount++
			$CompListArray += @($_.Value)
		}
	}
	$PopupAnswer = $Popup.Popup("Do you want to shutdown $SelectedCellsCount devices?",0,"Are you sure?",1)
	if ($PopupAnswer -eq 1){
		$JobName = "SysInfo_" + $DeploymentID
		Foreach ($CompName in $CompListArray) {
			[System.Windows.Forms.Application]::DoEvents()
			if ($script:CancelAction -eq $false){
				$CurrTime = Get-Date
				$CurrentTime = $CurrTime.ToLongTimeString()
				$LogText = "$CurrentTime - Starting shutdown of $CompName"
				$LogText = $LogText.replace("`n","")
				$LogBox.Text = $LogBox.Text + $LogText + "`n"
				$LogScrollTo = $LogBox.Text.Length - 250
				$LogBox.Select($LogScrollTo,0)
				$LogBox.ScrollToCaret()
				Start-Job -Name $JobName -ArgumentList $CompName -ScriptBlock {
					$CompName = $args
					if (Test-connection -computername $CompName -count 1) {
						& shutdown.exe /s /f /t 00 /d p:0:0 /m $CompName
						$strOutput = "$CompName ||On"
					}
					else {
						$strOutput = "$CompName ||Off"
					}
					Write-Output $strOutput
				}
				Receive-Job -Name $JobName | ForEach-Object {
					$strOutput = $_
					$strOutput = $strOutput | Out-String
					$OutputArray = $strOutput.Split("||")
					$CurrTime = Get-Date
					$CurrentTime = $CurrTime.ToLongTimeString()
					if ($strOutput.contains("||Off")){
						$OutputArray = $strOutput.Split("||")
						$LogBox.Text = $LogBox.Text + "$CurrentTime - Error pinging" + $OutputArray[0] + "`n"
					}
					elseif ($strOutput.contains("||On")){
						$LogBox.Text = $LogBox.Text + "$CurrentTime - Sent shutdown command to " + $OutputArray[0] + "`n"
					}
					$LogScrollTo = $LogBox.Text.Length - 250
					$LogBox.Select($LogScrollTo,0)
					$LogBox.ScrollToCaret()
				}
				while (((get-job | where-object { $_.Name -like "$JobName" -and $_.State -eq "Running" }) | measure).Count -gt 20 -and $script:CancelAction -eq $false){
					[System.Windows.Forms.Application]::DoEvents()
					if ($script:CancelAction -eq $true){}
					else {
						$CurrTime = Get-Date
						$CurrentTime = $CurrTime.ToLongTimeString()
						$LogBox.Text = $LogBox.Text + "$CurrentTime - Can only run 20 jobs at once, waiting on some to finish before continuing...`n"
						Start-Sleep -Seconds 1
						$LogScrollTo = $LogBox.Text.Length - 250
						$LogBox.Select($LogScrollTo,0)
						$LogBox.ScrollToCaret()
					}
				}
			}
		}
		while (((get-job | where-object { $_.Name -like "$JobName" -and $_.State -eq "Running" }) | measure).Count -gt 0 -and $script:CancelAction -eq $false){
			[System.Windows.Forms.Application]::DoEvents()
			if ($script:CancelAction -eq $true){}
			else {
				$CurrTime = Get-Date
				$CurrentTime = $CurrTime.ToLongTimeString()
				$LogBox.Text = $LogBox.Text + "$CurrentTime - Waiting on the last few jobs to finish...`n"
				Start-Sleep -Seconds 1
				$LogScrollTo = $LogBox.Text.Length - 250
				$LogBox.Select($LogScrollTo,0)
				$LogBox.ScrollToCaret()
			}
		}
		Receive-Job -Name $JobName | ForEach-Object {
			$strOutput = $_
			$strOutput = $strOutput | Out-String
			$OutputArray = $strOutput.Split("||")
			$CurrTime = Get-Date
			$CurrentTime = $CurrTime.ToLongTimeString()
			if ($strOutput.contains("||Off")){
				$OutputArray = $strOutput.Split("||")
				$LogBox.Text = $LogBox.Text + "$CurrentTime - Error pinging" + $OutputArray[0] + "`n"
			}
			elseif ($strOutput.contains("||On")){
				$LogBox.Text = $LogBox.Text + "$CurrentTime - Sent shutdown command to " + $OutputArray[0] + "`n"
			}
			$LogScrollTo = $LogBox.Text.Length - 250
			$LogBox.Select($LogScrollTo,0)
			$LogBox.ScrollToCaret()
		}
		$CurrTime = Get-Date
		$CurrentTime = $CurrTime.ToLongTimeString()
		$LogBox.Text = $LogBox.Text + "$CurrentTime - Finished shutting down selected devices!`n"
		$LogScrollTo = $LogBox.Text.Length - 250
		$LogBox.Select($LogScrollTo,0)
		$LogBox.ScrollToCaret()
	}
	else {
		$CurrTime = Get-Date
		$CurrentTime = $CurrTime.ToLongTimeString()
		$LogBox.Text = $LogBox.Text + "$CurrentTime - User cancelled shutdown`n"
		$LogScrollTo = $LogBox.Text.Length - 250
		$LogBox.Select($LogScrollTo,0)
		$LogBox.ScrollToCaret()
	}
}

$RestartDevices_Menu1=
{
	$SelectedCellsCount = 0
	$CompListArray = $null
	$SystemInfoView.SelectedCells | ForEach-Object {
		if ($_.ColumnIndex -eq 0) {
			$SelectedCellsCount++
			$CompListArray += @($_.Value)
		}
	}
	$PopupAnswer = $Popup.Popup("Do you want to restart $SelectedCellsCount devices?",0,"Are you sure?",1)
	if ($PopupAnswer -eq 1){
		$JobName = "SysInfo_" + $DeploymentID
		Foreach ($CompName in $CompListArray) {
			[System.Windows.Forms.Application]::DoEvents()
			if ($script:CancelAction -eq $false){
				$CurrTime = Get-Date
				$CurrentTime = $CurrTime.ToLongTimeString()
				$LogText = "$CurrentTime - Starting restart of $CompName"
				$LogText = $LogText.replace("`n","")
				$LogBox.Text = $LogBox.Text + $LogText + "`n"
				$LogScrollTo = $LogBox.Text.Length - 250
				$LogBox.Select($LogScrollTo,0)
				$LogBox.ScrollToCaret()
				Start-Job -Name $JobName -ArgumentList $CompName -ScriptBlock {
					$CompName = $args
					if (Test-connection -computername $CompName -count 1) {
						& shutdown.exe /r /f /t 00 /d p:0:0 /m $CompName
						$strOutput = "$CompName ||On"
					}
					else {
						$strOutput = "$CompName ||Off"
					}
					Write-Output $strOutput
				}
				Receive-Job -Name $JobName | ForEach-Object {
					$strOutput = $_
					$strOutput = $strOutput | Out-String
					$OutputArray = $strOutput.Split("||")
					$CurrTime = Get-Date
					$CurrentTime = $CurrTime.ToLongTimeString()
					if ($strOutput.contains("||Off")){
						$OutputArray = $strOutput.Split("||")
						$LogBox.Text = $LogBox.Text + "$CurrentTime - Error pinging" + $OutputArray[0] + "`n"
					}
					elseif ($strOutput.contains("||On")){
						$LogBox.Text = $LogBox.Text + "$CurrentTime - Sent restart command to " + $OutputArray[0] + "`n"
					}
					$LogScrollTo = $LogBox.Text.Length - 250
					$LogBox.Select($LogScrollTo,0)
					$LogBox.ScrollToCaret()
				}
				while (((get-job | where-object { $_.Name -like "$JobName" -and $_.State -eq "Running" }) | measure).Count -gt 20 -and $script:CancelAction -eq $false){
					[System.Windows.Forms.Application]::DoEvents()
					if ($script:CancelAction -eq $true){}
					else {
						$CurrTime = Get-Date
						$CurrentTime = $CurrTime.ToLongTimeString()
						$LogBox.Text = $LogBox.Text + "$CurrentTime - Can only run 20 jobs at once, waiting on some to finish before continuing...`n"
						Start-Sleep -Seconds 1
						$LogScrollTo = $LogBox.Text.Length - 250
						$LogBox.Select($LogScrollTo,0)
						$LogBox.ScrollToCaret()
					}
				}
			}
		}
		while (((get-job | where-object { $_.Name -like "$JobName" -and $_.State -eq "Running" }) | measure).Count -gt 0 -and $script:CancelAction -eq $false){
			[System.Windows.Forms.Application]::DoEvents()
			if ($script:CancelAction -eq $true){}
			else {
				$CurrTime = Get-Date
				$CurrentTime = $CurrTime.ToLongTimeString()
				$LogBox.Text = $LogBox.Text + "$CurrentTime - Waiting on the last few jobs to finish...`n"
				Start-Sleep -Seconds 1
				$LogScrollTo = $LogBox.Text.Length - 250
				$LogBox.Select($LogScrollTo,0)
				$LogBox.ScrollToCaret()
			}
		}
		Receive-Job -Name $JobName | ForEach-Object {
			$strOutput = $_
			$strOutput = $strOutput | Out-String
			$OutputArray = $strOutput.Split("||")
			$CurrTime = Get-Date
			$CurrentTime = $CurrTime.ToLongTimeString()
			if ($strOutput.contains("||Off")){
				$OutputArray = $strOutput.Split("||")
				$LogBox.Text = $LogBox.Text + "$CurrentTime - Error pinging" + $OutputArray[0] + "`n"
			}
			elseif ($strOutput.contains("||On")){
				$LogBox.Text = $LogBox.Text + "$CurrentTime - Sent restart command to " + $OutputArray[0] + "`n"
			}
			$LogScrollTo = $LogBox.Text.Length - 250
			$LogBox.Select($LogScrollTo,0)
			$LogBox.ScrollToCaret()
		}
		$CurrTime = Get-Date
		$CurrentTime = $CurrTime.ToLongTimeString()
		$LogBox.Text = $LogBox.Text + "$CurrentTime - Finished restarting selected devices!`n"
		$LogScrollTo = $LogBox.Text.Length - 250
		$LogBox.Select($LogScrollTo,0)
		$LogBox.ScrollToCaret()
	}
	else {
		$CurrTime = Get-Date
		$CurrentTime = $CurrTime.ToLongTimeString()
		$LogBox.Text = $LogBox.Text + "$CurrentTime - User cancelled restart`n"
		$LogScrollTo = $LogBox.Text.Length - 250
		$LogBox.Select($LogScrollTo,0)
		$LogBox.ScrollToCaret()
	}
}

$ContextMenuOpening=
{
	$SelectedCellsCount=0
	$SystemInfoView.SelectedCells | ForEach-Object {
		if ($_.ColumnIndex -eq 0) {
			$SelectedCellsCount++
			$CompListArray += @($_.Value)
		}
	}
	if ($SelectedCellsCount -gt 1) {$menuItem0.enabled = $false}
	else {$menuItem0.enabled = $true}
}

$ResExp_Menu1=
{
	$SystemInfoView.SelectedCells | ForEach-Object {
		if ($_.ColumnIndex -eq 0) {
			$CompName = $_.Value
		}
	}
	$ResourceExplorerPath = $env:SMS_ADMIN_UI_PATH
	$ResourceExplorerPath = $ResourceExplorerPath.replace("i386","")
	$ResourceExplorerPath = $ResourceExplorerPath + "resourceexplorer.exe"
	$strQuery = "-sms:ResExplrQuery=Select * From SMS_R_System Where ResourceNames[0]='" + $Compname + "'"
	$strConnection = "-sms:connection=\\" + $Server + "\" + $NameSpace 
	& $ResourceExplorerPath -s $strQuery $strConnection
}

$WOLDevices_Menu1=
{
	$wolpath = "$Directory\wolcmd.exe"
	$SelectedCellsCount = 0
	$CompListArray = $null
	$SystemInfoView.SelectedCells | ForEach-Object {
		if ($_.ColumnIndex -eq 0) {
			$SelectedCellsCount++
			$CompListArray += @($_.Value)
		}
	}
	$PopupAnswer = $Popup.Popup("Do you want to wake up $SelectedCellsCount devices?",0,"Are you sure?",1)
	if ($PopupAnswer -eq 1){
		Foreach ($CompName in $CompListArray) {
			$SentPacket = $false
			$CompName = $CompName.replace("`n","")
			$CompName = $CompName.replace("`t","")
			$strQuery = "Select * from SMS_G_System_NETWORK_ADAPTER_CONFIGURATION inner join SMS_R_System on SMS_R_System.ResourceID = SMS_G_System_NETWORK_ADAPTER_CONFIGURATION.ResourceID where SMS_R_System.ResourceNames[0] like '" + $CompName + "'"
			Get-WmiObject -Query $strQuery -Namespace $Namespace -ComputerName $Server | ForEach-Object {
				$strIP = $_.SMS_G_System_NETWORK_ADAPTER_CONFIGURATION.IPAddress
				$strMask = $_.SMS_G_System_NETWORK_ADAPTER_CONFIGURATION.IPSubnet
				if ($strIP -ne $null){
					$IPArray = $strIP.Split(",")
					$MaskArray = $strMask.Split(",")
					foreach ($instance in $IPArray){
						if ($instance.contains(".")){
							foreach ($MaskInstance in $MaskArray){
								if ($MaskInstance.contains(".")){
									$strMac = $_.SMS_G_System_NETWORK_ADAPTER_CONFIGURATION.MACAddress
									$strEditedMac = $strMac | Out-String
									$strEditedMac = $strEditedMac.replace(":","")
									$strEditedMac = $strEditedMac.Substring(0,12)
									& $wolPath $strEditedMac $instance $MaskInstance "12287"
									$CurrTime = Get-Date
									$CurrentTime = $CurrTime.ToLongTimeString()
									$LogBox.Text = $LogBox.Text + "$CurrentTime - $CompName - Sent packet to MAC: $strMac IP: $instance  Subnet: $MaskInstance `n"
									$LogScrollTo = $LogBox.Text.Length - 250
									$LogBox.Select($LogScrollTo,0)
									$LogBox.ScrollToCaret()
									$SentPacket = $true
								}
							}
						}
					}
				}
			}
			if ($SentPacket -eq $false) {
				$CurrTime = Get-Date
				$CurrentTime = $CurrTime.ToLongTimeString()
				$LogBox.Text = $LogBox.Text + "$CurrentTime - Could not find valid MAC for $CompName `n"
				$LogScrollTo = $LogBox.Text.Length - 250
				$LogBox.Select($LogScrollTo,0)
				$LogBox.ScrollToCaret()
			}
		}
		$CurrTime = Get-Date
		$CurrentTime = $CurrTime.ToLongTimeString()
		$LogBox.Text = $LogBox.Text + "$CurrentTime - Finished sending WOL packets`n"
		$LogScrollTo = $LogBox.Text.Length - 250
		$LogBox.Select($LogScrollTo,0)
		$LogBox.ScrollToCaret()
	}
	else {
		$CurrTime = Get-Date
		$CurrentTime = $CurrTime.ToLongTimeString()
		$LogBox.Text = $LogBox.Text + "$CurrentTime - User cancelled wake up`n"
		$LogScrollTo = $LogBox.Text.Length - 250
		$LogBox.Select($LogScrollTo,0)
		$LogBox.ScrollToCaret()
	}
}

$OnLoadForm_StateCorrection=
{
	$form1.WindowState = $InitialFormWindowState
	$count = 0
	$SuccessCount = 0
	$UnsuccessfulCount = 0
	$TimedOutCount = 0
	$script:CancelAction = $false
	$CloseCancelBtn.Text = "Cancel"
	$ReRunBtn.Enabled = $false
	$JobTimer = @{}
	$CompList = $null
	$Statuses = $Statuses | Out-String
	$DeploySuccess = 0
	$DeployInProg = 0
	$DeployError = 0
	$DeployRequire = 0
	$DeployUnknown = 0
	$RunningOn = "Running on "
	if ($FeatureType -eq 1) {
		$strquery = "select * from SMS_R_System inner join SMS_AppDeploymentAssetDetails As Deploy on Deploy.MachineID = SMS_R_System.ResourceID where Deploy.AssignmentID = '$AssignmentID'"
		Get-WmiObject -Query $strquery -Namespace $Namespace -ComputerName $Server | ForEach-Object {
			$StatusCode = $_.Deploy.StatusType
			if ($StatusCode -eq 1 -and $Statuses.contains("1")){
				$CompList += @($_.SMS_R_System.ResourceNames[0])
				$DeploySuccess++
			}
			elseif ($StatusCode -eq 2 -and $Statuses.contains("2")){
				$CompList += @($_.SMS_R_System.ResourceNames[0])
				$DeployInProg++
			}
			elseif ($StatusCode -eq 3 -and $Statuses.contains("3")) {
				$CompList += @($_.SMS_R_System.ResourceNames[0])
				$DeployRequire++
			}
			elseif ($StatusCode -eq 5 -and $Statuses.contains("5")) {
				$CompList += @($_.SMS_R_System.ResourceNames[0])
				$DeployError++
			}
		}
		if ($Statuses.contains("4")) {
			$strquery = "select * from SMS_R_System inner join SMS_CIDeploymentUnknownAssetDetails as Deploy on Deploy.MachineID = SMS_R_System.ResourceID where Deploy.AssignmentID = '$AssignmentID'"
			Get-WmiObject -Query $strquery -Namespace $Namespace -ComputerName $Server | ForEach-Object {
				$CompList += @($_.SMS_R_System.ResourceNames[0])
				$DeployUnknown++
			}
		}
		If ($DeploySuccess -ne 0) {$RunningOn = $RunningOn + "Successful ($DeploySuccess) "}
		if ($DeployInProg -ne 0) {$RunningOn = $RunningOn + "In Progress ($DeployInProg) "}
		if ($DeployRequire -ne 0) {$RunningOn = $RunningOn + "Requirements Not Met ($DeployRequire) "}
		if ($DeployUnknown -ne 0) {$RunningOn = $RunningOn + "Unknown ($DeployUnknown) "}
		if ($DeployError -ne 0) {$RunningOn = $RunningOn + "Error ($DeployError)"}
		$RunningOnLbl.Text = $RunningOn
	}
	elseif ($FeatureType -eq 5) {
		$strquery = "select * from SMS_R_System inner join SMS_SUMDeploymentAssetDetails As Deploy on Deploy.ResourceID = SMS_R_System.ResourceID where Deploy.AssignmentID = '$AssignmentID'"
		Get-WmiObject -Query $strquery -Namespace $Namespace -ComputerName $Server | ForEach-Object {
			$StatusCode = $_.Deploy.StatusType
			if ($StatusCode -eq 1 -and $Statuses.contains("1")){
				$CompList += @($_.SMS_R_System.ResourceNames[0])
				$DeploySuccess++
			}
			elseif ($StatusCode -eq 2 -and $Statuses.contains("2")){
				$CompList += @($_.SMS_R_System.ResourceNames[0])
				$DeployInProg++
			}
			elseif ($StatusCode -eq 3 -and $Statuses.contains("3")) {
				$CompList += @($_.SMS_R_System.ResourceNames[0])
				$DeployRequire++
			}
			elseif ($StatusCode -eq 4 -and $Statuses.contains("4")) {
				$CompList += @($_.SMS_R_System.ResourceNames[0])
				$DeployUnknown++
			}
			elseif ($StatusCode -eq 5 -and $Statuses.contains("5")) {
				$CompList += @($_.SMS_R_System.ResourceNames[0])
				$DeployError++
			}
		}
		If ($DeploySuccess -ne 0) {$RunningOn = $RunningOn + "Successful ($DeploySuccess) "}
		if ($DeployInProg -ne 0) {$RunningOn = $RunningOn + "In Progress ($DeployInProg) "}
		if ($DeployRequire -ne 0) {$RunningOn = $RunningOn + "Requirements Not Met ($DeployRequire) "}
		if ($DeployUnknown -ne 0) {$RunningOn = $RunningOn + "Unknown ($DeployUnknown) "}
		if ($DeployError -ne 0) {$RunningOn = $RunningOn + "Error ($DeployError)"}
		$RunningOnLbl.Text = $RunningOn
	}
	else {
		$strquery = "select * from SMS_R_System inner join SMS_ClassicDeploymentAssetDetails As Deploy on Deploy.DeviceID = SMS_R_System.ResourceID where Deploy.DeploymentID = '$DeploymentID'"
		Get-WmiObject -Query $strquery -Namespace $Namespace -ComputerName $Server | ForEach-Object {
			$StatusCode = $_.Deploy.StatusType
			if ($StatusCode -eq 1 -and $Statuses.contains("1")){
				$CompList += @($_.SMS_R_System.ResourceNames[0])
				$DeploySuccess++
			}
			elseif ($StatusCode -eq 2 -and $Statuses.contains("2")){
				$CompList += @($_.SMS_R_System.ResourceNames[0])
				$DeployInProg++
			}
			elseif ($StatusCode -eq 3 -and $Statuses.contains("3")) {
				$CompList += @($_.SMS_R_System.ResourceNames[0])
				$DeployRequire++
			}
			elseif ($StatusCode -eq 4 -and $Statuses.contains("4")) {
				$CompList += @($_.SMS_R_System.ResourceNames[0])
				$DeployUnknown++
			}
			elseif ($StatusCode -eq 5 -and $Statuses.contains("5")) {
				$CompList += @($_.SMS_R_System.ResourceNames[0])
				$DeployError++
			}
		}
		If ($DeploySuccess -ne 0) {$RunningOn = $RunningOn + "Successful ($DeploySuccess) "}
		if ($DeployInProg -ne 0) {$RunningOn = $RunningOn + "In Progress ($DeployInProg) "}
		if ($DeployRequire -ne 0) {$RunningOn = $RunningOn + "Requirements Not Met ($DeployRequire) "}
		if ($DeployUnknown -ne 0) {$RunningOn = $RunningOn + "Unknown ($DeployUnknown) "}
		if ($DeployError -ne 0) {$RunningOn = $RunningOn + "Error ($DeployError)"}
		$RunningOnLbl.Text = $RunningOn
	}
	$CompList = $CompList | Sort-Object 
	foreach($CompName in $CompList) {
		[System.Windows.Forms.Application]::DoEvents()
		if ($script:CancelAction -eq $false){
			$count++
			$ColNameLbl.Text = "$ColName - Started $count of $ColMemberCount Jobs"
			$CompName = $_.SMS_R_System.ResourceNames[0]
			$JobName = "SysInfo_" + $CompName
			$CurrTime = Get-Date
			$JobTimer.add("$CompName",$CurrTime)
			$CurrentTime = $CurrTime.ToLongTimeString()
			$CurrHour = $CurrTime.Hour | Out-String
			$CurrMin = $CurrTime.Minute | Out-String
			$CurrSec = $CurrTime.Second | Out-String
			$LogText = "$CurrentTime - Gathering information - $CompName"
			$LogText = $LogText.replace("`n","")
			$LogBox.Text = $LogBox.Text + $LogText + "`n"
			$LogScrollTo = $LogBox.Text.Length - 250
			$LogBox.Select($LogScrollTo,0)
			$LogBox.ScrollToCaret()
			Start-Job -Name $JobName -ArgumentList $CompName -ScriptBlock {
				$CompName = $args
				$Error.Clear()
				$strOutput = "$CompName||"
				Test-connection -computername $CompName -count 1 | ForEach-Object {
					$strQuery = "Select UserName,Domain,Model from Win32_ComputerSystem"
					Get-WmiObject -Query $strQuery -Namespace root\cimv2 -ComputerName $CompName | ForEach-Object {
						$strDomain = $_.Domain
						$StrUser = $_.UserName
						$strModel = $_.Model
					}
					$strQuery = "Select Caption,LastBootUpTime from Win32_OperatingSystem"
					Get-WmiObject -Query $strQuery -Namespace root\cimv2 -ComputerName $CompName | ForEach-Object {
						$strOS = $_.Caption
						$strBootTime = [Management.ManagementDateTimeConverter]::ToDateTime($_.LastBootUpTime)
					}
					$strQuery = "select IPAddress,Description from Win32_NetworkAdapterConfiguration"
					Get-WmiObject -Query $strQuery -Namespace root\cimv2 -ComputerName $CompName | ForEach-Object {
						$ArrayIP = $_.IPAddress
						if ($ArrayIP -ne $null) {
							foreach ($instance in $ArrayIP){
								if ($instance -ne $null){
									if ($instance.contains(".")){
										$strIP = $instance
									}
								}
							}
						}
					}
				}
				if ($Error[0]) {$strOutput = "$CompName" + "||Off"}
				else {$strOutput = "$CompName" + "|| $strUser || $strDomain || $strBootTime || $strModel || $strOS || $strIP"}
				Write-Output $strOutput
			} | Out-Null
			Receive-Job -Name "SysInfo_*" | ForEach-Object {
				[System.Windows.Forms.Application]::DoEvents()
				$strOutput = $_
				$strOutput = $strOutput | Out-String
				$CurrTime = Get-Date
				$CurrentTime = $CurrTime.ToLongTimeString()
				if ($strOutput.contains("||Off")){
					$OutputArray = $strOutput.Split("||")
					$LogBox.Text = $LogBox.Text + "$CurrentTime - Error pinging " + $OutputArray[0] + "`n"
					$SystemInfoView.Rows.Add($OutputArray[0],"Off")
					$UnsuccessfulCount++
				}
				else {
					$OutputArray = $strOutput.Split("||")
					$SystemInfoView.Rows.Add($OutputArray[0],"On",$OutputArray[2],$OutputArray[4],$OutputArray[6],$OutputArray[8],$OutputArray[10],$OutputArray[12])
					$LogBox.Text = $LogBox.Text + "$CurrentTime - Received information from " + $OutputArray[0] + "`n"
					$SuccessCount++
				}
				$LogScrollTo = $LogBox.Text.Length - 250
				$LogBox.Select($LogScrollTo,0)
				$LogBox.ScrollToCaret()
			}
			do {
				$RunningJobs = 0
				$IgnoredJobs = 0
				[System.Windows.Forms.Application]::DoEvents()
				get-job | where-object {$_.Name -like "SysInfo_*" -and $_.State -eq "Running"} | ForEach-Object {
					$JobID = $_.ID
					[System.Windows.Forms.Application]::DoEvents()
					if ($SkippedJobs -inotcontains "$JobID") {
						$RunningJobs++
						$CurrTime = Get-Date
						$CurrentTime = $CurrTime.ToLongTimeString()
						$JobCompName = $_.Name
						$JobCompName = $JobCompName.replace("SysInfo_","")
						$StartTime = $JobTimer["$JobCompName"]
						$CompareTime = $CurrTime - $StartTime
						if ($CompareTime.Minutes -gt 1 -and $IgnoredJobs -eq 0){
							$SkippedJobs += @("$JobID")
							$IgnoredJobs++
							$TimedOutCount++
							$LogBox.Text = $LogBox.Text + "$CurrentTime - $JobCompName timed out...`n"
							$LogScrollTo = $LogBox.Text.Length - 250
							$LogBox.Select($LogScrollTo,0)
							$LogBox.ScrollToCaret()
							$SystemInfoView.Rows.Add("$JobCompName","Timed out after 2 minutes","Possible WMI problems")
						}
					}
				}
				if ($RunningJobs -gt 20) {
					[System.Windows.Forms.Application]::DoEvents()
					Start-Sleep 1
					$LogBox.Text = $LogBox.Text + "$CurrentTime - Can only run 20 jobs at once, waiting on some to finish before continuing...`n"
					$LogScrollTo = $LogBox.Text.Length - 250
					$LogBox.Select($LogScrollTo,0)
					$LogBox.ScrollToCaret()
				}
			} while ($RunningJobs -gt 20 -and $script:CancelAction -ne $true)
		}
	}
	do {
		$RunningJobs = 0
		$IgnoredJobs = 0
		[System.Windows.Forms.Application]::DoEvents()
		get-job | where-object {$_.Name -like "SysInfo_*" -and $_.State -eq "Running"} | ForEach-Object {
			if ($SkippedJobs -inotcontains $_.ID) {
				[System.Windows.Forms.Application]::DoEvents()
				$RunningJobs++
				$CurrTime = Get-Date
				$CurrentTime = $CurrTime.ToLongTimeString()
				$JobCompName = $_.Name
				$JobCompName = $JobCompName.replace("SysInfo_","")
				$StartTime = $JobTimer["$JobCompName"]
				$CompareTime = $CurrTime - $StartTime
				if ($CompareTime.Minutes -gt 1 -and $IgnoredJobs -eq 0){
					$SkippedJobs += @($_.ID)
					$IgnoredJobs++
					$TimedOutCount++
					$LogBox.Text = $LogBox.Text + "$CurrentTime - $JobCompName timed out...`n"
					$LogScrollTo = $LogBox.Text.Length - 250
					$LogBox.Select($LogScrollTo,0)
					$LogBox.ScrollToCaret()
					$SystemInfoView.Rows.Add("$JobCompName","Timed out after 2 minutes","Possible WMI problems")
				}
			}
		}
		if ($RunningJobs -gt 0) {
			[System.Windows.Forms.Application]::DoEvents()
			Start-Sleep 1
			$LogBox.Text = $LogBox.Text + "$CurrentTime - Waiting on $RunningJobs jobs to complete still. It will time out after 2 minutes if it is still running...`n"
			$LogScrollTo = $LogBox.Text.Length - 250
			$LogBox.Select($LogScrollTo,0)
			$LogBox.ScrollToCaret()
		}
	} while ($RunningJobs -gt 0 -and $script:CancelAction -ne $true)	
	Receive-Job -Name "SysInfo_*" | ForEach-Object {
		[System.Windows.Forms.Application]::DoEvents()
		$strOutput = $_
		$strOutput = $strOutput | Out-String
		$CurrTime = Get-Date
		$CurrentTime = $CurrTime.ToLongTimeString()
		if ($strOutput.contains("||Off")){
			$OutputArray = $strOutput.Split("||")
			$LogBox.Text = $LogBox.Text + "$CurrentTime - Error pinging " + $OutputArray[0] + "`n"
			$SystemInfoView.Rows.Add($OutputArray[0],"Off")
			$UnsuccessfulCount++
		}
		else {
			$OutputArray = $strOutput.Split("||")
			$SystemInfoView.Rows.Add($OutputArray[0],"On",$OutputArray[2],$OutputArray[4],$OutputArray[6],$OutputArray[8],$OutputArray[10],$OutputArray[12])
			$LogBox.Text = $LogBox.Text + "$CurrentTime - Received information from " + $OutputArray[0] + "`n"
			$SuccessCount++
		}
		$LogScrollTo = $LogBox.Text.Length - 250
		$LogBox.Select($LogScrollTo,0)
		$LogBox.ScrollToCaret()
	}
	$ReRunBtn.Enabled = $true
	$CloseCancelBtn.Text = "Close"
	$CurrTime = Get-Date
	$CurrentTime = $CurrTime.ToLongTimeString()
	$LogBox.Text = $LogBox.Text + "$CurrentTime - Finished!`n"
	$LogScrollTo = $LogBox.Text.Length - 250
	$LogBox.Select($LogScrollTo,0)
	$LogBox.ScrollToCaret()
	$ColNameLbl.Text = "$ColName - Finished!  $SuccessCount successful, $UnsuccessfulCount were off, and $TimedOutCount timed out"
}
$menuItem0 = New-Object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Resource Explorer"
$ContextMenuStrip.Items.Add($menuItem0)
$menuItem0.add_Click($ResExp_Menu1)
$menuItem1 = New-Object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Restart Selected Devices"
$ContextMenuStrip.Items.Add($menuItem1)
$menuItem1.add_Click($RestartDevices_Menu1)
$menuItem2 = New-Object System.Windows.Forms.ToolStripMenuItem -ArgumentList "Shutdown Selected Devices"
$ContextMenuStrip.Items.Add($menuItem2)
$menuItem2.add_Click($ShutdownDevices_Menu1)
$menuItem3 = New-Object System.Windows.Forms.ToolStripMenuItem -ArgumentList "WOL Selected Devices"
$ContextMenuStrip.Items.Add($menuItem3)
$menuItem3.add_Click($WOLDevices_Menu1)

$ContextMenuStrip.add_Opening($ContextMenuOpening)
$SystemInfoView.ContextMenuStrip = $ContextMenuStrip


#----------------------------------------------
#region Generated Form Code
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 603
$System_Drawing_Size.Width = 814
$form1.ClientSize = $System_Drawing_Size
$form1.DataBindings.DefaultDataSourceUpdateMode = 0
$form1.Name = "form1"
$form1.Text = "System Information"

$RunningOnLbl.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 12
$System_Drawing_Point.Y = 32
$RunningOnLbl.Location = $System_Drawing_Point
$RunningOnLbl.Name = "RunningOnLbl"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 790
$RunningOnLbl.Size = $System_Drawing_Size
$RunningOnLbl.TabIndex = 7
$RunningOnLbl.Text = "Running on:"
$RunningOnLbl.TextAlign = 32

$form1.Controls.Add($RunningOnLbl)

$NoteLbl.Anchor = 6
$NoteLbl.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 159
$System_Drawing_Point.Y = 568
$NoteLbl.Location = $System_Drawing_Point
$NoteLbl.Name = "NoteLbl"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 336
$NoteLbl.Size = $System_Drawing_Size
$NoteLbl.TabIndex = 6
$NoteLbl.Text = "Right click for more options"
$NoteLbl.TextAlign = 16

$form1.Controls.Add($NoteLbl)

$AboutBtn.Anchor = 6

$AboutBtn.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 12
$System_Drawing_Point.Y = 568
$AboutBtn.Location = $System_Drawing_Point
$AboutBtn.Name = "AboutBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 75
$AboutBtn.Size = $System_Drawing_Size
$AboutBtn.TabIndex = 5
$AboutBtn.Text = "About"
$AboutBtn.UseVisualStyleBackColor = $True
$AboutBtn.add_Click($AboutBtn_OnClick)

$form1.Controls.Add($AboutBtn)

$RerunBtn.Anchor = 10

$RerunBtn.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 653
$System_Drawing_Point.Y = 568
$RerunBtn.Location = $System_Drawing_Point
$RerunBtn.Name = "RerunBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 75
$RerunBtn.Size = $System_Drawing_Size
$RerunBtn.TabIndex = 4
$RerunBtn.Text = "Rerun"
$RerunBtn.UseVisualStyleBackColor = $True
$RerunBtn.add_Click($RerunBtn_OnClick)

$form1.Controls.Add($RerunBtn)

$CloseCancelBtn.Anchor = 10

$CloseCancelBtn.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 734
$System_Drawing_Point.Y = 568
$CloseCancelBtn.Location = $System_Drawing_Point
$CloseCancelBtn.Name = "CloseCancelBtn"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 75
$CloseCancelBtn.Size = $System_Drawing_Size
$CloseCancelBtn.TabIndex = 3
$CloseCancelBtn.Text = "Cancel"
$CloseCancelBtn.UseVisualStyleBackColor = $True
$CloseCancelBtn.add_Click($CloseCancelBtn_OnClick)

$form1.Controls.Add($CloseCancelBtn)

$LogBox.Anchor = 14
$LogBox.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 12
$System_Drawing_Point.Y = 470
$LogBox.Location = $System_Drawing_Point
$LogBox.Name = "LogBox"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 92
$System_Drawing_Size.Width = 790
$LogBox.Size = $System_Drawing_Size
$LogBox.TabIndex = 2
$LogBox.Text = ""

$form1.Controls.Add($LogBox)

$SystemInfoView.AllowUserToAddRows = $False
$SystemInfoView.AllowUserToDeleteRows = $False
$SystemInfoView.AllowUserToResizeRows = $False
$SystemInfoView.Anchor = 15
$SystemInfoView.ClipboardCopyMode = 2
$System_Windows_Forms_DataGridViewCellStyle_1 = New-Object System.Windows.Forms.DataGridViewCellStyle
$System_Windows_Forms_DataGridViewCellStyle_1.Alignment = 16
$System_Windows_Forms_DataGridViewCellStyle_1.BackColor = [System.Drawing.Color]::FromArgb(255,240,240,240)
$System_Windows_Forms_DataGridViewCellStyle_1.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",8.25,0,3,1)
$System_Windows_Forms_DataGridViewCellStyle_1.ForeColor = [System.Drawing.Color]::FromArgb(255,0,0,0)
$System_Windows_Forms_DataGridViewCellStyle_1.SelectionBackColor = [System.Drawing.Color]::FromArgb(255,51,153,255)
$System_Windows_Forms_DataGridViewCellStyle_1.SelectionForeColor = [System.Drawing.Color]::FromArgb(255,255,255,255)
$System_Windows_Forms_DataGridViewCellStyle_1.WrapMode = 1
$SystemInfoView.ColumnHeadersDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
$SystemInfoView.ColumnHeadersHeightSizeMode = 1
$System_Windows_Forms_DataGridViewTextBoxColumn_2 = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
$System_Windows_Forms_DataGridViewTextBoxColumn_2.AutoSizeMode = 6
$System_Windows_Forms_DataGridViewTextBoxColumn_2.HeaderText = "Computer Name"
$System_Windows_Forms_DataGridViewTextBoxColumn_2.Name = ""
$System_Windows_Forms_DataGridViewTextBoxColumn_2.ReadOnly = $True
$System_Windows_Forms_DataGridViewTextBoxColumn_2.Width = 108

$SystemInfoView.Columns.Add($System_Windows_Forms_DataGridViewTextBoxColumn_2)|Out-Null
$System_Windows_Forms_DataGridViewTextBoxColumn_3 = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
$System_Windows_Forms_DataGridViewTextBoxColumn_3.AutoSizeMode = 6
$System_Windows_Forms_DataGridViewTextBoxColumn_3.HeaderText = "On/Off"
$System_Windows_Forms_DataGridViewTextBoxColumn_3.Name = ""
$System_Windows_Forms_DataGridViewTextBoxColumn_3.ReadOnly = $True
$System_Windows_Forms_DataGridViewTextBoxColumn_3.Width = 65

$SystemInfoView.Columns.Add($System_Windows_Forms_DataGridViewTextBoxColumn_3)|Out-Null
$System_Windows_Forms_DataGridViewTextBoxColumn_4 = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
$System_Windows_Forms_DataGridViewTextBoxColumn_4.AutoSizeMode = 6
$System_Windows_Forms_DataGridViewTextBoxColumn_4.HeaderText = "Console User"
$System_Windows_Forms_DataGridViewTextBoxColumn_4.Name = ""
$System_Windows_Forms_DataGridViewTextBoxColumn_4.ReadOnly = $True
$System_Windows_Forms_DataGridViewTextBoxColumn_4.Width = 95

$SystemInfoView.Columns.Add($System_Windows_Forms_DataGridViewTextBoxColumn_4)|Out-Null
$System_Windows_Forms_DataGridViewTextBoxColumn_5 = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
$System_Windows_Forms_DataGridViewTextBoxColumn_5.AutoSizeMode = 6
$System_Windows_Forms_DataGridViewTextBoxColumn_5.HeaderText = "Domain"
$System_Windows_Forms_DataGridViewTextBoxColumn_5.Name = ""
$System_Windows_Forms_DataGridViewTextBoxColumn_5.ReadOnly = $True
$System_Windows_Forms_DataGridViewTextBoxColumn_5.Width = 68

$SystemInfoView.Columns.Add($System_Windows_Forms_DataGridViewTextBoxColumn_5)|Out-Null
$System_Windows_Forms_DataGridViewTextBoxColumn_6 = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
$System_Windows_Forms_DataGridViewTextBoxColumn_6.AutoSizeMode = 6
$System_Windows_Forms_DataGridViewTextBoxColumn_6.HeaderText = "Last Reboot Time"
$System_Windows_Forms_DataGridViewTextBoxColumn_6.Name = ""
$System_Windows_Forms_DataGridViewTextBoxColumn_6.ReadOnly = $True
$System_Windows_Forms_DataGridViewTextBoxColumn_6.Width = 116

$SystemInfoView.Columns.Add($System_Windows_Forms_DataGridViewTextBoxColumn_6)|Out-Null
$System_Windows_Forms_DataGridViewTextBoxColumn_7 = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
$System_Windows_Forms_DataGridViewTextBoxColumn_7.AutoSizeMode = 6
$System_Windows_Forms_DataGridViewTextBoxColumn_7.HeaderText = "Model"
$System_Windows_Forms_DataGridViewTextBoxColumn_7.Name = ""
$System_Windows_Forms_DataGridViewTextBoxColumn_7.ReadOnly = $True
$System_Windows_Forms_DataGridViewTextBoxColumn_7.Width = 61

$SystemInfoView.Columns.Add($System_Windows_Forms_DataGridViewTextBoxColumn_7)|Out-Null
$System_Windows_Forms_DataGridViewTextBoxColumn_8 = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
$System_Windows_Forms_DataGridViewTextBoxColumn_8.AutoSizeMode = 6
$System_Windows_Forms_DataGridViewTextBoxColumn_8.HeaderText = "Operating System"
$System_Windows_Forms_DataGridViewTextBoxColumn_8.Name = ""
$System_Windows_Forms_DataGridViewTextBoxColumn_8.ReadOnly = $True
$System_Windows_Forms_DataGridViewTextBoxColumn_8.Width = 115

$SystemInfoView.Columns.Add($System_Windows_Forms_DataGridViewTextBoxColumn_8)|Out-Null
$System_Windows_Forms_DataGridViewTextBoxColumn_9 = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
$System_Windows_Forms_DataGridViewTextBoxColumn_9.AutoSizeMode = 6
$System_Windows_Forms_DataGridViewTextBoxColumn_9.HeaderText = "IP Address"
$System_Windows_Forms_DataGridViewTextBoxColumn_9.Name = ""
$System_Windows_Forms_DataGridViewTextBoxColumn_9.ReadOnly = $True
$System_Windows_Forms_DataGridViewTextBoxColumn_9.Width = 83

$SystemInfoView.Columns.Add($System_Windows_Forms_DataGridViewTextBoxColumn_9)|Out-Null
$SystemInfoView.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Windows_Forms_DataGridViewCellStyle_10 = New-Object System.Windows.Forms.DataGridViewCellStyle
$System_Windows_Forms_DataGridViewCellStyle_10.Alignment = 16
$System_Windows_Forms_DataGridViewCellStyle_10.BackColor = [System.Drawing.Color]::FromArgb(255,255,255,255)
$System_Windows_Forms_DataGridViewCellStyle_10.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",8.25,0,3,1)
$System_Windows_Forms_DataGridViewCellStyle_10.ForeColor = [System.Drawing.Color]::FromArgb(255,0,0,0)
$System_Windows_Forms_DataGridViewCellStyle_10.SelectionBackColor = [System.Drawing.Color]::FromArgb(255,51,153,255)
$System_Windows_Forms_DataGridViewCellStyle_10.SelectionForeColor = [System.Drawing.Color]::FromArgb(255,255,255,255)
$System_Windows_Forms_DataGridViewCellStyle_10.WrapMode = 2
$SystemInfoView.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_10
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 12
$System_Drawing_Point.Y = 58
$SystemInfoView.Location = $System_Drawing_Point
$SystemInfoView.Name = "SystemInfoView"
$SystemInfoView.ReadOnly = $True
$SystemInfoView.RowHeadersVisible = $False
$SystemInfoView.RowHeadersWidthSizeMode = 1
$SystemInfoView.SelectionMode = 1
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 406
$System_Drawing_Size.Width = 790
$SystemInfoView.Size = $System_Drawing_Size
$SystemInfoView.TabIndex = 1

$form1.Controls.Add($SystemInfoView)

$DeployNameLbl.Anchor = 13
$DeployNameLbl.DataBindings.DefaultDataSourceUpdateMode = 0

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 12
$System_Drawing_Point.Y = 9
$DeployNameLbl.Location = $System_Drawing_Point
$DeployNameLbl.Name = "DeployNameLbl"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 23
$System_Drawing_Size.Width = 790
$DeployNameLbl.Size = $System_Drawing_Size
$DeployNameLbl.TabIndex = 0
$DeployNameLbl.Text = "$DeploymentName"
$DeployNameLbl.TextAlign = 32

$form1.Controls.Add($DeployNameLbl)

#endregion Generated Form Code

#Save the initial state of the form
$InitialFormWindowState = $form1.WindowState
#Init the OnLoad event to correct the initial state of the form
$form1.add_Load($OnLoadForm_StateCorrection)
$form1.add_Closing($OnClose)
#Show the Form
$form1.ShowDialog()| Out-Null

} #End Function

#Call the Function
GenerateForm
